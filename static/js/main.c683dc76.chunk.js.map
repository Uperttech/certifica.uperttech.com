{"version":3,"sources":["components/Input.tsx","components/SelectAction.tsx","util/common.ts","util/submitGoogleForm.ts","providers/SlidesProvider/reducer.ts","providers/SlidesProvider/slides.tsx","providers/SlidesProvider/index.tsx","util/useURLParams.ts","views/FormSlides.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Input","props","label","icon","className","style","ref","maskPlaceholder","mask","inputProps","LabelInput","input","htmlFor","name","LineUl","styled","ul","ButtonsUl","SelectAction","obj","filteredKeys","options","onChangeOption","initialValue","buttons","asInput","initialOption","length","React","useState","selectedOption","setSelectedOption","Ul","Object","keys","filter","key","includes","reduce","acc","type","id","value","map","option","i","onClick","selectOption","url","data","a","fetch","method","body","mode","response","ok","Error","ActionTypes","slidesFormNameMappings","email","phone","postal_code","social_media","legal_entity","occupation","machines","renew","recommendation","submitSlidesForm","formData","submitGoogleForm","mappings","newFormData","FormData","entries","forEach","set","adaptFormData","customerActions","customerActionsNames","slides","comprar","backgroundClass","sideInfo","title","content","form","onSubmit","changeSlide","mergeFormData","submitButtonText","inputs","CustomerActionSelect","required","autoFocus","placeholder","pattern","comprar_necessidades","fim","onLoad","indicar","submitButtonOverrideClasses","classes","replace","useSlides","initialCustomerAction","indexOf","action","dispatch","slideName","ChangeSlide","payload","currentSlideName","MergeFormData","reducer","state","currentSlide","mergeForms","mergedFormData","forms","append","SlidesContext","createContext","SlidesProvider","reducerInitialState","actionParam","initialState","getURLParam","params","URLSearchParams","window","location","search","get","undefined","useURLParams","useReducer","Provider","Consumer","useContext","FormSlides","slidesData","sideInfoRef","useRef","buttonClassesFn","href","pointerEvents","text","minHeight","e","preventDefault","target","el","cloneElement","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6PAUO,SAASA,EAAMC,GAUhBA,EARFC,MAQED,EAPFE,KAOEF,EANFG,UAMEH,EALFI,MAKEJ,EAJFK,IAIEL,EAHFM,gBAGEN,EAFFO,KARsC,IASnCC,EATkC,YAUnCR,EAVmC,qEAYvC,OAAOS,EAAW,2BACbT,GADY,IAEfU,MACE,sBAAKP,UAAU,2DAAf,UACGH,EAAME,KACNF,EAAMO,KACL,cAAC,IAAD,2BACMC,GADN,IAEED,KAAMP,EAAMO,KACZJ,UAAU,2CAGZ,iDACMK,GADN,IAEEL,UAAU,iDAaf,SAASM,EAAWT,GACzB,OACE,sBAAKG,UAAWH,EAAMG,UAAWC,MAAOJ,EAAMI,MAA9C,UACE,uBAAOO,QAASX,EAAMY,KAAMT,UAAU,kCAAtC,SACGH,EAAMC,QAERD,EAAMU,S,+BCnDPG,EAASC,IAAOC,GAAV,wTACN,qCAKE,gBAGE,kFAIA,wBAIA,cAIE,oBAMNC,EAAYF,IAAOC,GAAV,sNACT,iCAGE,qGAGE,6bAIA,wBAIA,cAGE,+UAcL,SAASE,EAAT,GAOgB,ICtEMC,EAAUC,EDgErCC,EAMoB,EANpBA,QACAC,EAKoB,EALpBA,eAKoB,IAJpBC,oBAIoB,MAJL,EAIK,MAHpBC,eAGoB,SAFpBC,EAEoB,EAFpBA,QACGxB,EACiB,+EACdyB,EACJH,EAAeF,EAAQM,QAAUJ,EAAe,EAAIA,EAAe,EAFjD,EAGwBK,IAAMC,SAASH,GAHvC,mBAGbI,EAHa,KAGGC,EAHH,KAUdC,EAAKR,EAAUP,EAAYH,EAEjC,OACE,eAACkB,EAAD,4BCnFyBb,EDmFJlB,ECnFcmB,EDmFP,CAAC,MClF/Ba,OAAOC,KAAKf,GACTgB,QAAO,SAACC,GAAD,OAAUhB,EAAaiB,SAASD,MACvCE,QAAO,SAACC,EAAKH,GAAN,mBAAC,eAAmBG,GAApB,kBAA0BH,EAAMjB,EAAIiB,OAASjB,KDgFrD,cACGM,GACC,uBACEe,KAAK,SACLC,GAAIhB,EACJZ,KAAMY,EACNiB,MAAOrB,EAAQS,KAGlBT,EAAQsB,KAAI,SAACC,EAAQC,GAAT,OACX,oBAAYzC,UAAW0B,IAAmBe,EAAI,SAAW,GAAzD,SACE,wBAAQL,KAAK,SAASM,QAAS,kBAnBlB,SAACD,GACpBd,EAAkBc,GAClBvB,GAAkBA,EAAeD,EAAQwB,GAAIA,GAiBFE,CAAaF,IAAlD,SACGD,KAFIC,U,yEE7FV,WACLG,EACAC,GAFK,eAAAC,EAAA,sEAIkBC,MAAM,GAAD,OAAIH,EAAJ,iBAAwB,CAClDI,OAAQ,OACRC,KAAMJ,EACNK,KAAM,YAPH,WAICC,EAJD,QAUSC,IAAwB,WAAlBD,EAASf,KAVxB,sBAWG,IAAIiB,MAAM,+DAXb,4C,sBAeA,ICAKC,ECCCC,EAAyB,CACpCnB,KAAM,mBACN3B,KAAM,mBACN+C,MAAO,kBACPC,MAAO,mBACPC,YAAa,kBACbC,aAAc,mBACdC,aAAc,kBACdC,WAAY,kBACZC,SAAU,mBACVC,MAAO,mBACPC,eAAgB,oBAGLC,EAAmB,SAACC,GAAD,OF9BzB,SAAP,oCE+BEC,CAjBA,6FFC2B,SAC3BD,EACAE,GAEA,IAAMC,EAAc,IAAIC,SAMxB,OAJA,YAAIJ,EAASK,WAAWC,SACtB,mCAAExC,EAAF,KAAOM,EAAP,YAAkB8B,EAASpC,IAAQqC,EAAYI,IAAIL,EAASpC,GAAMM,MAG7D+B,EEQLK,CAAcR,EAAUX,KAMfoB,EAAoC,CAAC,UAAW,WAChDC,EAA6C,CACxD,gBACA,iBAsBWC,EAAsB,CACjCC,QAAS,CACPC,gBAAiB,mBACjBC,SAAU,CACRC,MAAO,4CACPC,QAAS,CACP,6EACA,+KAGJC,KAAM,CACJF,MAAO,gCACPG,SAAU,SAACvC,EAAD,GAAqD,IAAlCwC,EAAiC,EAAjCA,aAC3BC,EAD4D,EAApBA,eAC1BzC,GACdwC,EAAY,yBAEdE,iBAAkB,YAClBC,OAAQ,CACN,cAACC,EAAD,CAAsBzF,UAAU,SAEhC,cAACJ,EAAD,CACEE,MAAM,gBACNE,UAAU,eACVD,KAAM,cAAC,IAAD,CAAQC,UAAU,uBACxBoC,KAAK,OACLsD,UAAQ,EACRC,WAAS,EACTtD,GAAG,OACH5B,KAAK,OACLmF,YAAY,qBAGd,cAAChG,EAAD,CACEE,MAAM,SACNE,UAAU,eACVD,KAAM,cAAC,IAAD,CAAQC,UAAU,uBACxBoC,KAAK,QACLsD,UAAQ,EACRrD,GAAG,QACH5B,KAAK,QACLmF,YAAY,2BAGd,cAAChG,EAAD,CACEE,MAAM,WACNE,UAAU,eACVD,KAAM,cAAC,IAAD,CAASC,UAAU,uBACzBoC,KAAK,MACLsD,UAAQ,EACRrD,GAAG,QACH5B,KAAK,QACLL,KAAK,kBACLwF,YAAY,mBAGd,cAAChG,EAAD,CACEE,MAAM,MACNE,UAAU,eACVD,KAAM,cAAC,IAAD,CAAkBC,UAAU,uBAClCoC,KAAK,MACLsD,UAAQ,EACRrD,GAAG,cACH5B,KAAK,cACLL,KAAK,YACLyF,QAAQ,kBACRZ,MAAM,kDACNW,YAAY,iBAKpBE,qBAAsB,CACpBf,gBAAiB,mBACjBC,SAAU,CACRC,MAAO,qDACPC,QAAS,CACP,gMAGJC,KAAM,CACJF,MAAO,2BACPG,SAAU,SAACvC,EAAD,GAAqD,IAAlCwC,EAAiC,EAAjCA,aAC3BC,EAD4D,EAApBA,eAC1BzC,GACdwC,EAAY,QAEdE,iBAAkB,wBAClBC,OAAQ,CACN,cAAClF,EAAD,CACER,MAAM,aACNE,UAAU,eACVO,MACE,cAACO,EAAD,CACEd,UAAU,OACVoB,SAAO,EACPC,QAAQ,eACRZ,KAAK,GACLQ,QAAS,CAAC,mBAAiB,0BAIjC,cAACX,EAAD,CACER,MAAM,eACNE,UAAU,eACVO,MACE,cAACO,EAAD,CACEd,UAAU,OACVoB,SAAO,EACPC,QAAQ,aACRJ,QAAS,CACP,WACA,gBACA,YACA,YACA,aAKR,cAACX,EAAD,CACER,MAAM,gCACNE,UAAU,eACVO,MACE,cAACO,EAAD,CACEd,UAAU,OACVoB,SAAO,EACPC,QAAQ,WACRJ,QAAS,CACP,8BACA,4BACA,+CAKR,cAACX,EAAD,CACER,MAAM,sCACNE,UAAU,eACVO,MACE,cAACO,EAAD,CACEd,UAAU,OACVoB,SAAO,EACPC,QAAQ,QACRJ,QAAS,CAAC,QAAS,SAAU,cAKnC,cAACrB,EAAD,CACEE,MAAM,0CACNE,UAAU,qBACVD,KAAM,cAAC,IAAD,CAASC,UAAU,uBACzBoC,KAAK,OACLsD,UAAQ,EACRrD,GAAG,iBACH5B,KAAK,iBACLmF,YAAY,qBAKpBG,IAAK,CACHhB,gBAAiB,mBACjBC,SAAU,CACRC,MAAO,sEACPC,QAAS,CACP,oGAGJc,OAAQ,gBAAG9B,EAAH,EAAGA,SAAH,OAAkBD,EAAiBC,KAE7C+B,QAAS,CACPlB,gBAAiB,qBACjBC,SAAU,CACRC,MAAO,6CACPC,QAAS,CACP,iEACA,4LAGJC,KAAM,CACJF,MAAO,wBACPM,iBAAkB,YAClBW,4BAA6B,SAACC,GAAD,OAC3BA,EAAQC,QAAQ,cAAe,kBACjChB,SAAU,SAACvC,EAAD,GAAqD,IAAlCwC,EAAiC,EAAjCA,aAC3BC,EAD4D,EAApBA,eAC1BzC,GACdwC,EAAY,QAEdG,OAAQ,CACN,cAACC,EAAD,CAAsBzF,UAAU,SAEhC,cAACJ,EAAD,CACEE,MAAM,gBACNE,UAAU,eACVD,KAAM,cAAC,IAAD,CAAQC,UAAU,uBACxBoC,KAAK,OACLsD,UAAQ,EACRC,WAAS,EACTtD,GAAG,OACH5B,KAAK,OACLmF,YAAY,qBAGd,cAAChG,EAAD,CACEE,MAAM,SACNE,UAAU,eACVD,KAAM,cAAC,IAAD,CAAQC,UAAU,uBACxBoC,KAAK,QACLsD,UAAQ,EACRrD,GAAG,QACH5B,KAAK,QACLmF,YAAY,2BAGd,cAACtF,EAAD,CACER,MAAM,6EACNE,UAAU,eACVO,MACE,cAACO,EAAD,CACEd,UAAU,OACVoB,SAAO,EACPC,QAAQ,eACRJ,QAAS,CAAC,YAAa,WAAY,oBASjD,SAASwE,EAAqB5F,GAA2C,IAAD,EAMlEwG,IAJF1B,EAFoE,EAEpEA,gBACAC,EAHoE,EAGpEA,qBACA0B,EAJoE,EAIpEA,sBACAjB,EALoE,EAKpEA,YAGF,OACE,cAACvE,EAAD,aACEO,QAAQ,OACRJ,QAAS2D,EACTzD,aAAcwD,EAAgB4B,QAAQD,GACtCpF,eAAgB,SAACsF,GAAD,OACdnB,EACEV,EACEC,EAAqB2B,QAAQC,OAI/B3G,K,SD5SEyD,O,6BAAAA,I,kCAAAA,M,KAUL,IAAM+B,EAAc,SAACoB,GAAD,OAAqC,SAC9DC,GAD8D,OAG9DD,EAAS,CACPrE,KAAMkB,EAAYqD,YAClBC,QAAS,CAAEC,iBAAkBH,OAGpBpB,EAAgB,SAACmB,GAAD,OAAqC,SAChEvC,GADgE,OAGhEuC,EAAS,CACPrE,KAAMkB,EAAYwD,cAClBF,QAAS,CAAE1C,gBAgBF6C,EAAU,SACrBC,EACAR,GACyB,IAAD,MACxB,OAAQA,EAAOpE,MACb,KAAKkB,EAAYqD,YACf,OAAO,2BACFK,GADL,IAEEH,iBAAgB,UAAEL,EAAOI,eAAT,aAAE,EAAgBC,iBAClCI,aAAcpC,EAAM,UAAC2B,EAAOI,eAAR,aAAC,EAAgBC,oBAEzC,KAAKvD,EAAYwD,cACf,OAAO,2BACFE,GADL,IAEE9C,SAAUgD,EACRF,EAAM9C,SADY,UAElBsC,EAAOI,eAFW,aAElB,EAAgB1C,YAGtB,QACE,MAAM,IAAIb,MAAM,yBAIhB6D,EAAa,WAAoC,IACrD,IAAMC,EAAiB,IAAI7C,SAD0B,mBAAhC8C,EAAgC,yBAAhCA,EAAgC,gBASrD,OANAA,EAAM5C,SAAQ,SAACW,GAAD,OACZ,YAAIA,EAAKZ,WAAWC,SAAQ,mCAAExC,EAAF,KAAOM,EAAP,YAC1B6E,EAAeE,OAAOrF,EAAKM,SAIxB6E,GE1DHG,EAAgBC,wBAAiC,IAM1CC,EAA8C,SAAC3H,GAAW,IAI/D4H,EFEoB,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,YACvBpB,EACJoB,GAAe/C,EAAgB1C,SAASyF,GACnCA,EACD/C,EAAgB,GAEtB,MAAO,CACLkC,iBAAkBP,EAClBW,aAAcpC,EAAOyB,GACrBpC,SAAU,IAAII,UEXYqD,CAAa,CAAED,aAFvBE,ECrCM,WAC1B,IAAMC,EAAS,IAAIC,gBAAgBC,OAAOC,SAASC,QAEnD,MAAO,CACLC,IAAK,SAACzH,GAAD,OAAkBoH,EAAOK,IAAIzH,SAAS0H,IDgChBC,GAArBF,KACwB,YAFoC,EAK1CG,qBAAWtB,EAASU,GALsB,mBAK7DT,EAL6D,KAKtDP,EALsD,KAO5DI,EAA6CG,EAA7CH,iBAAkBI,EAA2BD,EAA3BC,aAAc/C,EAAa8C,EAAb9C,SAExC,OACE,cAACoD,EAAcgB,SAAf,aACEhG,MAAO,CACLuC,SACAoC,eACAJ,mBACAlC,kBACAC,uBACA0B,sBAAuBmB,EAAoBZ,iBAC3C3C,WACAmB,YAAaA,EAAYoB,GACzBnB,cAAeA,EAAcmB,KAE3B5G,KAKV2H,EAAee,SAAWjB,EAAciB,SAEjC,IAAMlC,EAAY,kBAAyBmC,qBAAWlB,IE7DtD,SAASmB,IAAc,IAAD,EACrBC,EAAarC,IACXY,EAAiByB,EAAjBzB,aAEF0B,EAAcnH,IAAMoH,OAAuB,MAU7C3B,EAAajB,QACfiB,EAAajB,OAAO0C,GAGtB,IAOMG,GACJ,UAAA5B,EAAa9B,YAAb,eAAmBe,8BAClB,SAACC,GAAD,OAAqBA,GAExB,OACE,uBACEnG,UAAS,0BACPiH,EAAa9B,KAAO,aAAe,eAD5B,0BAES8B,EAAalC,gBAFtB,UADX,UAKE,qBAAK/E,UAAU,mEAAf,SACE,mBAAG8I,KAAK,IAAR,SACE,wBACE1G,KAAK,gBACLS,KAAK,2BACL5C,MAAO,CAAE8I,cAAe,QAH1B,8CASJ,sBAAK/I,UAAU,6FAAf,UACE,sBACEA,UAAU,gIACVE,IAAKyI,EAFP,UAIE,oBAAI3I,UAAU,4BAAd,SACGiH,EAAajC,SAASC,QAGxBgC,EAAajC,SAASE,QAAQ3C,KAAI,SAACyG,EAAMvG,GAAP,OACjC,mBAAGzC,UAAU,kBAAb,SACGgJ,GADiCvG,MAItC,sBAAKzC,UAAU,OAAf,UACE,mBAAG8I,KAAK,oBAAR,SACE,wBAAQ9I,UAAU,4HAAlB,gCAEF,mBAAG8I,KAAK,iCAAR,SACA,wBAAQ9I,UAAU,4HAAlB,6CAKHiH,EAAa9B,MACZ,sBACEnF,UAAU,kFACVC,MAAO,CAAEgJ,UAAW,OAFtB,UAIE,oBAAIjJ,UAAU,oCAAd,SACGiH,EAAa9B,KAAKF,QAGrB,uBACEG,SA9DS,SAAC8D,GAAyC,IAAD,EAC5DA,EAAEC,iBAEF,IAAMjF,EAAW,IAAII,SAAS4E,EAAEE,QAChC,UAAAnC,EAAa9B,YAAb,SAAmBC,SAASlB,EAAUwE,IA2D5B1I,UAAU,uBACVqC,GAAG,OAHL,UAKG4E,EAAa9B,KAAKK,OAAOjD,KAAI,SAAC8G,EAAI5G,GAAL,OAC5BjB,IAAM8H,aAAaD,EAAI,CAAErH,IAAKqH,EAAGxJ,MAAMY,MAAQgC,OAGjD,uBAAOL,KAAK,SAAS3B,KAAK,QAAQ4B,GAAG,UAErC,sBAAKrC,UAAU,mCAAf,UACE,wBACEA,UAAW6I,EACT,wIAEFzG,KAAK,SAJP,SAMG6E,EAAa9B,KAAKI,mBAGrB,sBAAKvF,UAAU,wCAAf,mDACsC,OACpC,mBACEA,UAAU,gDACV8I,KAAK,sCAFP,wCAMC,OARH,QAQkB,OAChB,mBACE9I,UAAU,gDACV8I,KAAK,oCAFP,kCAMC,OAfH,4BAsBV,yBAAQ9I,UAAU,sFAAlB,yEAC8D,uBAD9D,4BCzHC,SAASuJ,IACd,OACE,cAAC,EAAD,UACE,cAACd,EAAD,MCKce,QACW,cAA7BzB,OAAOC,SAASyB,UAEa,UAA7B1B,OAAOC,SAASyB,UAEhB1B,OAAOC,SAASyB,SAASC,MACvB,2DCZJC,IAASC,OAAO,cAACL,EAAD,IAASM,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c683dc76.chunk.js","sourcesContent":["import React from \"react\";\nimport InputMask from \"react-input-mask\";\n\ntype InputProps = React.HTMLProps<HTMLInputElement> & {\n  label: string;\n  mask?: string;\n  maskPlaceholder?: string;\n  icon?: JSX.Element;\n};\n\nexport function Input(props: InputProps) {\n  const {\n    label,\n    icon,\n    className,\n    style,\n    ref,\n    maskPlaceholder,\n    mask,\n    ...inputProps\n  } = props;\n\n  return LabelInput({\n    ...props,\n    input: (\n      <div className=\"flex items-center rounded-md p-4 mt-3 bg-gray-100 w-full\">\n        {props.icon}\n        {props.mask ? (\n          <InputMask\n            {...inputProps}\n            mask={props.mask}\n            className=\"focus:outline-none bg-gray-100 w-full\"\n          />\n        ) : (\n          <input\n            {...inputProps}\n            className=\"focus:outline-none bg-gray-100 w-full\"\n          />\n        )}\n      </div>\n    ),\n  });\n}\n\nexport type LabelInputProps = React.HTMLProps<HTMLInputElement> & {\n  label: string;\n  input: JSX.Element;\n};\n\nexport function LabelInput(props: LabelInputProps) {\n  return (\n    <div className={props.className} style={props.style}>\n      <label htmlFor={props.name} className=\"block font-medium text-gray-500\">\n        {props.label}\n      </label>\n      {props.input}\n    </div>\n  );\n}\n","import React from \"react\";\nimport tw, { styled } from \"twin.macro\";\nimport { filterObject } from \"../util/common\";\n\nconst LineUl = styled.ul`\n  ${tw`flex w-max`}\n  border-bottom: #c5c5c5 solid .5px;\n  color: #707070;\n\n  li {\n    ${tw`opacity-50`}\n\n    button {\n      ${tw`focus:outline-none font-light`}\n    }\n\n    &:not(:last-child) {\n      ${tw`mr-3`}\n    }\n\n    &.active {\n      ${tw`opacity-100`}\n      border-bottom: #378BF3 solid 2px;\n\n      button {\n        ${tw`font-medium`}\n      }\n    }\n  }\n`;\n\nconst ButtonsUl = styled.ul`\n  ${tw`flex flex-wrap`}\n\n  li {\n    ${tw`opacity-50 flex flex-col justify-center mb-3`}\n\n    button {\n      ${tw`whitespace-nowrap focus:outline-none font-medium block text-center text-black bg-gray-200 p-3 rounded-md hover:bg-gray-300 self-end`}\n    }\n\n    &:not(:last-child) {\n      ${tw`mr-3`}\n    }\n\n    &.active {\n      ${tw`opacity-100`}\n\n      button {\n        ${tw`focus:outline-none whitespace-nowrap text-white bg-blue-400 hover:bg-blue-400`}\n      }\n    }\n  }\n`;\n\ntype SelectActionProps = React.HTMLProps<HTMLUListElement> & {\n  options: string[];\n  onChangeOption?: (option: string, index: number) => void;\n  initialValue?: number;\n  buttons?: boolean;\n  asInput?: string;\n};\n\nexport function SelectAction({\n  options,\n  onChangeOption,\n  initialValue = 0,\n  buttons = false,\n  asInput,\n  ...props\n}: SelectActionProps) {\n  const initialOption =\n    initialValue < options.length && initialValue > 0 ? initialValue : 0;\n  const [selectedOption, setSelectedOption] = React.useState(initialOption);\n\n  const selectOption = (i: number) => {\n    setSelectedOption(i);\n    onChangeOption && onChangeOption(options[i], i);\n  };\n\n  const Ul = buttons ? ButtonsUl : LineUl;\n\n  return (\n    <Ul {...filterObject(props, [\"as\"])}>\n      {asInput && (\n        <input\n          type=\"hidden\"\n          id={asInput}\n          name={asInput}\n          value={options[selectedOption]}\n        />\n      )}\n      {options.map((option, i) => (\n        <li key={i} className={selectedOption === i ? \"active\" : \"\"}>\n          <button type=\"button\" onClick={() => selectOption(i)}>\n            {option}\n          </button>\n        </li>\n      ))}\n    </Ul>\n  );\n}\n","export const filterObject = (obj: any, filteredKeys: (keyof typeof obj)[]) =>\n  Object.keys(obj)\n    .filter((key) => !filteredKeys.includes(key))\n    .reduce((acc, key) => ({ ...acc, [key]: obj[key] }), obj);\n","export async function submitGoogleForm(\n  url: string,\n  data: FormData\n): Promise<void> {\n  const response = await fetch(`${url}/formResponse`, {\n    method: \"POST\",\n    body: data,\n    mode: \"no-cors\",\n  });\n\n  if (!response.ok && response.type !== \"opaque\") {\n    throw new Error(\"Não foi possível enviar sua mensagem, tente novamente\");\n  }\n}\n\nexport const adaptFormData = (\n  formData: FormData,\n  mappings: Record<string, string>\n): FormData => {\n  const newFormData = new FormData();\n\n  [...formData.entries()].forEach(\n    ([key, value]) => mappings[key] && newFormData.set(mappings[key], value)\n  );\n\n  return newFormData;\n};\n","import { Dispatch } from \"react\";\nimport {\n  CustomerAction,\n  customerActions,\n  Slide,\n  SlideName,\n  slides,\n} from \"./slides\";\n\nexport interface SlidesProviderState {\n  currentSlideName: SlideName;\n  formData: FormData;\n  currentSlide: Slide;\n}\n\nexport enum ActionTypes {\n  ChangeSlide,\n  MergeFormData,\n}\n\ntype SlidesReducerDispatch = Dispatch<{\n  type: ActionTypes;\n  payload?: Partial<SlidesProviderState>;\n}>;\n\nexport const changeSlide = (dispatch: SlidesReducerDispatch) => (\n  slideName: SlideName\n) =>\n  dispatch({\n    type: ActionTypes.ChangeSlide,\n    payload: { currentSlideName: slideName },\n  });\n\nexport const mergeFormData = (dispatch: SlidesReducerDispatch) => (\n  formData: FormData\n) =>\n  dispatch({\n    type: ActionTypes.MergeFormData,\n    payload: { formData },\n  });\n\nexport const initialState = ({ actionParam }: { actionParam?: string }) => {\n  const initialCustomerAction =\n    actionParam && customerActions.includes(actionParam as CustomerAction)\n      ? (actionParam as CustomerAction)\n      : customerActions[0];\n\n  return {\n    currentSlideName: initialCustomerAction,\n    currentSlide: slides[initialCustomerAction],\n    formData: new FormData(),\n  };\n};\n\nexport const reducer = (\n  state: SlidesProviderState,\n  action: { type: ActionTypes; payload?: Partial<SlidesProviderState> }\n): SlidesProviderState => {\n  switch (action.type) {\n    case ActionTypes.ChangeSlide:\n      return {\n        ...state,\n        currentSlideName: action.payload?.currentSlideName as SlideName,\n        currentSlide: slides[action.payload?.currentSlideName as SlideName],\n      };\n    case ActionTypes.MergeFormData:\n      return {\n        ...state,\n        formData: mergeForms(\n          state.formData,\n          action.payload?.formData as FormData\n        ),\n      };\n    default:\n      throw new Error(\"Unknown action.type\");\n  }\n};\n\nconst mergeForms = (...forms: FormData[]): FormData => {\n  const mergedFormData = new FormData();\n\n  forms.forEach((form) =>\n    [...form.entries()].forEach(([key, value]) =>\n      mergedFormData.append(key, value)\n    )\n  );\n\n  return mergedFormData;\n};\n","import React from \"react\";\nimport {\n  HiUser,\n  HiMail,\n  HiPhone,\n  HiLocationMarker,\n  HiShare,\n} from \"react-icons/hi\";\nimport { SlidesContextData, useSlides } from \".\";\nimport { Input, LabelInput } from \"../../components/Input\";\nimport { SelectAction } from \"../../components/SelectAction\";\nimport { adaptFormData, submitGoogleForm } from \"../../util/submitGoogleForm\";\n\nexport const slidesFormURL =\n  \"https://docs.google.com/forms/d/e/1FAIpQLSdZg-peKegqWHAhc_-UsrT-nfeviZswG2wrz8xyFedmc2b-4Q\";\n\nexport const slidesFormNameMappings = {\n  type: \"entry.1185172935\",\n  name: \"entry.1123145975\",\n  email: \"entry.688141577\",\n  phone: \"entry.1883000013\",\n  postal_code: \"entry.961962106\",\n  social_media: \"entry.1523411598\",\n  legal_entity: \"entry.105376195\",\n  occupation: \"entry.939455264\",\n  machines: \"entry.1621677435\",\n  renew: \"entry.1154927299\",\n  recommendation: \"entry.1662194686\",\n};\n\nexport const submitSlidesForm = (formData: FormData) =>\n  submitGoogleForm(\n    slidesFormURL,\n    adaptFormData(formData, slidesFormNameMappings)\n  );\n\nexport type CustomerAction = \"comprar\" | \"indicar\";\nexport type CustomerActionName = \"Quero comprar\" | \"Quero indicar\";\n\nexport const customerActions: CustomerAction[] = [\"comprar\", \"indicar\"];\nexport const customerActionsNames: CustomerActionName[] = [\n  \"Quero comprar\",\n  \"Quero indicar\",\n];\nexport interface Slide {\n  onLoad?: (context: SlidesContextData) => void;\n  backgroundClass: \"primary-gradient\" | \"secondary-gradient\";\n  sideInfo: {\n    title: string;\n    content: string[];\n  };\n  form?: {\n    title: string;\n    onSubmit: (data: FormData, context: SlidesContextData) => void;\n    submitButtonText: string;\n    submitButtonOverrideClasses?: (classes: string) => string;\n    inputs: JSX.Element[];\n  };\n}\n\nexport type SlideName = \"comprar\" | \"indicar\" | \"comprar_necessidades\" | \"fim\";\n\nexport type SlideRecord = Record<SlideName, Slide>;\n\nexport const slides: SlideRecord = {\n  comprar: {\n    backgroundClass: \"primary-gradient\",\n    sideInfo: {\n      title: \"Bem vindo a era dos certificados digitais\",\n      content: [\n        \"Nós facilitamos sua vida quando o assunto é digitalizar seu trabalho\",\n        \"Através do Certifica Fácil, empresas, contadores, advogados, médicos e outros profissionais podem adquirir seu certificado digital de maneira rápida e simples\",\n      ],\n    },\n    form: {\n      title: \"Informe seus dados de contato\",\n      onSubmit: (data: FormData, { changeSlide, mergeFormData }) => {\n        mergeFormData(data);\n        changeSlide(\"comprar_necessidades\");\n      },\n      submitButtonText: \"Continuar\",\n      inputs: [\n        <CustomerActionSelect className=\"mb-6\" />,\n\n        <Input\n          label=\"Nome completo\"\n          className=\"my-3 text-sm\"\n          icon={<HiUser className=\"mx-2 text-gray-500\" />}\n          type=\"text\"\n          required\n          autoFocus\n          id=\"name\"\n          name=\"name\"\n          placeholder=\"João da Silva\"\n        />,\n\n        <Input\n          label=\"E-mail\"\n          className=\"my-3 text-sm\"\n          icon={<HiMail className=\"mx-2 text-gray-500\" />}\n          type=\"email\"\n          required\n          id=\"email\"\n          name=\"email\"\n          placeholder=\"joao.silva@empresa.com\"\n        />,\n\n        <Input\n          label=\"Telefone\"\n          className=\"my-3 text-sm\"\n          icon={<HiPhone className=\"mx-2 text-gray-500\" />}\n          type=\"tel\"\n          required\n          id=\"phone\"\n          name=\"phone\"\n          mask=\"(99) 99999 9999\"\n          placeholder=\"(67) 9999 9999\"\n        />,\n\n        <Input\n          label=\"CEP\"\n          className=\"my-3 text-sm\"\n          icon={<HiLocationMarker className=\"mx-2 text-gray-500\" />}\n          type=\"tel\"\n          required\n          id=\"postal_code\"\n          name=\"postal_code\"\n          mask=\"99999-999\"\n          pattern=\"\\d{5}\\-\\d{3}\"\n          title=\"CEPs válidos devem possuir formato 55555-333\"\n          placeholder=\"55555-333\"\n        />,\n      ],\n    },\n  },\n  comprar_necessidades: {\n    backgroundClass: \"primary-gradient\",\n    sideInfo: {\n      title: \"Soluções que se adequam as suas necessidades\",\n      content: [\n        \"Através das informações coletadas, podemos oferecer uma experiência exclusiva para você, indicando certificados que melhor atendem às necessidades do seu empreendimento.\",\n      ],\n    },\n    form: {\n      title: \"Descreva sua necessidade\",\n      onSubmit: (data: FormData, { changeSlide, mergeFormData }) => {\n        mergeFormData(data);\n        changeSlide(\"fim\");\n      },\n      submitButtonText: \"Solicitar certificado\",\n      inputs: [\n        <LabelInput\n          label=\"Eu sou uma\"\n          className=\"my-3 text-sm\"\n          input={\n            <SelectAction\n              className=\"mt-3\"\n              buttons\n              asInput=\"legal_entity\"\n              name=\"\"\n              options={[\"Pessoa física\", \"Pessoa jurídica\"]}\n            />\n          }\n        />,\n        <LabelInput\n          label=\"Trabalho com\"\n          className=\"my-3 text-sm\"\n          input={\n            <SelectAction\n              className=\"mt-3\"\n              buttons\n              asInput=\"occupation\"\n              options={[\n                \"Medicina\",\n                \"Contabilidade\",\n                \"Advocacia\",\n                \"Gestão\",\n                \"Outro\",\n              ]}\n            />\n          }\n        />,\n        <LabelInput\n          label=\"Desejo utilizar meu cerficado\"\n          className=\"my-3 text-sm\"\n          input={\n            <SelectAction\n              className=\"mt-3\"\n              buttons\n              asInput=\"machines\"\n              options={[\n                \"Na minha máquina pessoal\",\n                \"Em mais de uma máquina\",\n                \"Em máquinas distantes (via internet)\",\n              ]}\n            />\n          }\n        />,\n        <LabelInput\n          label=\"Quero renovar meu cerficado daqui a\"\n          className=\"my-3 text-sm\"\n          input={\n            <SelectAction\n              className=\"mt-3\"\n              buttons\n              asInput=\"renew\"\n              options={[\"1 ano\", \"2 anos\", \"3 anos\"]}\n            />\n          }\n        />,\n\n        <Input\n          label=\"Código de indicação (opcional)\"\n          className=\"my-3 text-sm w-max\"\n          icon={<HiShare className=\"mx-2 text-gray-500\" />}\n          type=\"text\"\n          required\n          id=\"recommendation\"\n          name=\"recommendation\"\n          placeholder=\"certificauper\"\n        />,\n      ],\n    },\n  },\n  fim: {\n    backgroundClass: \"primary-gradient\",\n    sideInfo: {\n      title: \"Você está a um passo da digitalização do seu negócio\",\n      content: [\n        \"Verifique sua caixa de e-mail. Enviaremos uma proposta exclusiva para compra do seu certificado\",\n      ],\n    },\n    onLoad: ({ formData }) => submitSlidesForm(formData),\n  },\n  indicar: {\n    backgroundClass: \"secondary-gradient\",\n    sideInfo: {\n      title: \"Ajude a promover a revolução digital\",\n      content: [\n        \"Nós valorizamos parceiros que desejam crescer junto conosco\",\n        \"Ao tornar-se um indicador, você recebe uma comissão a cada venda efetuada que utilizar seu código de indicador, além de proporcionar descontos especiais para essas compras\",\n      ],\n    },\n    form: {\n      title: \"Torne-se um indicador\",\n      submitButtonText: \"Finalizar\",\n      submitButtonOverrideClasses: (classes: string) =>\n        classes.replace(\"bg-blue-400\", \"bg-purple-400\"),\n      onSubmit: (data: FormData, { changeSlide, mergeFormData }) => {\n        mergeFormData(data);\n        changeSlide(\"fim\");\n      },\n      inputs: [\n        <CustomerActionSelect className=\"mb-6\" />,\n\n        <Input\n          label=\"Nome completo\"\n          className=\"my-3 text-sm\"\n          icon={<HiUser className=\"mx-2 text-gray-500\" />}\n          type=\"text\"\n          required\n          autoFocus\n          id=\"name\"\n          name=\"name\"\n          placeholder=\"João da Silva\"\n        />,\n\n        <Input\n          label=\"E-mail\"\n          className=\"my-3 text-sm\"\n          icon={<HiMail className=\"mx-2 text-gray-500\" />}\n          type=\"email\"\n          required\n          id=\"email\"\n          name=\"email\"\n          placeholder=\"joao.silva@empresa.com\"\n        />,\n\n        <LabelInput\n          label=\"Qual o principal canal de comunicação que você pretende utilizar?\"\n          className=\"my-3 text-sm\"\n          input={\n            <SelectAction\n              className=\"my-3\"\n              buttons\n              asInput=\"social_media\"\n              options={[\"Instagram\", \"Facebook\", \"WhatsApp\"]}\n            />\n          }\n        />,\n      ],\n    },\n  },\n};\n\nfunction CustomerActionSelect(props: React.HTMLProps<HTMLUListElement>) {\n  const {\n    customerActions,\n    customerActionsNames,\n    initialCustomerAction,\n    changeSlide,\n  } = useSlides();\n\n  return (\n    <SelectAction\n      asInput=\"type\"\n      options={customerActionsNames}\n      initialValue={customerActions.indexOf(initialCustomerAction)}\n      onChangeOption={(action) =>\n        changeSlide(\n          customerActions[\n            customerActionsNames.indexOf(action as CustomerActionName)\n          ]\n        )\n      }\n      {...props}\n    />\n  );\n}\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport { createContext, useContext, useReducer } from \"react\";\nimport { useURLParams } from \"../../util/useURLParams\";\nimport {\n  SlidesProviderState,\n  reducer,\n  changeSlide,\n  mergeFormData,\n  initialState,\n} from \"./reducer\";\nimport {\n  CustomerAction,\n  CustomerActionName,\n  customerActions,\n  customerActionsNames,\n  SlideName,\n  SlideRecord,\n  slides,\n} from \"./slides\";\n\nexport interface SlidesContextData extends SlidesProviderState {\n  slides: SlideRecord;\n  customerActions: CustomerAction[];\n  customerActionsNames: CustomerActionName[];\n  initialCustomerAction: CustomerAction;\n  changeSlide: (slide: SlideName) => void;\n  mergeFormData: (formData: FormData) => void;\n}\n\nconst SlidesContext = createContext<SlidesContextData>({} as SlidesContextData);\n\ntype Provider<T> = React.FC<{ children: JSX.Element[] | JSX.Element }> & {\n  Consumer: React.Consumer<T>;\n};\n\nexport const SlidesProvider: Provider<SlidesContextData> = (props) => {\n  const { get: getURLParam } = useURLParams();\n  const actionParam = getURLParam(\"action\");\n\n  const reducerInitialState = initialState({ actionParam });\n  const [state, dispatch] = useReducer(reducer, reducerInitialState);\n\n  const { currentSlideName, currentSlide, formData } = state;\n\n  return (\n    <SlidesContext.Provider\n      value={{\n        slides,\n        currentSlide,\n        currentSlideName,\n        customerActions,\n        customerActionsNames,\n        initialCustomerAction: reducerInitialState.currentSlideName as CustomerAction,\n        formData,\n        changeSlide: changeSlide(dispatch),\n        mergeFormData: mergeFormData(dispatch),\n      }}\n      {...props}\n    />\n  );\n};\n\nSlidesProvider.Consumer = SlidesContext.Consumer;\n\nexport const useSlides = (): SlidesContextData => useContext(SlidesContext);\n","export const useURLParams = () => {\n  const params = new URLSearchParams(window.location.search);\n\n  return {\n    get: (name: string) => params.get(name) || undefined,\n  };\n};\n","import React from \"react\";\nimport { useSlides } from \"../providers/SlidesProvider\";\n\nexport function FormSlides() {\n  const slidesData = useSlides();\n  const { currentSlide } = slidesData;\n\n  const sideInfoRef = React.useRef<HTMLDivElement>(null);\n\n  /*\n  const retriggerSideInfoAnimation = () =>\n    sideInfoRef.current?.parentNode?.replaceChild(\n      sideInfoRef.current,\n      sideInfoRef.current\n    );\n  */\n\n  if (currentSlide.onLoad) {\n    currentSlide.onLoad(slidesData);\n  }\n\n  const onSubmitForm = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const formData = new FormData(e.target as HTMLFormElement);\n    currentSlide.form?.onSubmit(formData, slidesData);\n  };\n\n  const buttonClassesFn =\n    currentSlide.form?.submitButtonOverrideClasses ||\n    ((classes: string) => classes);\n\n  return (\n    <main\n      className={`relative w-full ${\n        currentSlide.form ? \"min-h-full\" : \"min-h-screen\"\n      } gradient-main ${currentSlide.backgroundClass} pb-12`}\n    >\n      <div className=\"absolute py-10 px-20 flex lg:justify-start justify-center w-full\">\n        <a href=\"/\">\n          <object\n            type=\"image/svg+xml\"\n            data=\"certifica-facil-logo.svg\"\n            style={{ pointerEvents: \"none\" }}\n          >\n            Uperttech Certifica Fácil\n          </object>\n        </a>\n      </div>\n      <div className=\"flex lg:flex-row lg:h-full flex-col items-center max-w-screen-2xl w-full min-h-full m-auto\">\n        <div\n          className=\"flex-1 items-center justify-center lg:block text-white text-lg m-5 lg:mx-12 lg:p-0 pt-28 px-16 w-full max-w-screen-lg fade-in\"\n          ref={sideInfoRef}\n        >\n          <h1 className=\"text-5xl font-medium mb-5\">\n            {currentSlide.sideInfo.title}\n          </h1>\n\n          {currentSlide.sideInfo.content.map((text, i) => (\n            <p className=\"mb-5 opacity-80\" key={i}>\n              {text}\n            </p>\n          ))}\n          <div className=\"flex\">\n            <a href=\"tel:+556730151779\" >\n              <button className=\"focus:outline-none duration-300 hover:bg-purple-500 text-center text-white m-3 text-sm bg-purple-400 py-3 px-5 rounded-md\">(67) 3015 - 1779</button>\n            </a>\n            <a href=\"mailto:certifica@uperttech.com\">\n            <button className=\"focus:outline-none duration-300 hover:bg-purple-500 text-center text-white m-3 text-sm bg-purple-400 py-3 px-5 rounded-md\">certifica@uperttech.com</button>\n            </a>\n          </div>\n        </div>\n\n        {currentSlide.form && (\n          <div\n            className=\"bg-white shadow-lg lg:mx-12 max-w-2xl my-10 mx-5 rounded-3xl p-10 flex flex-col\"\n            style={{ minHeight: \"90%\" }}\n          >\n            <h2 className=\"font-semibold text-3xl mt-8 mb-10\">\n              {currentSlide.form.title}\n            </h2>\n\n            <form\n              onSubmit={onSubmitForm}\n              className=\"flex flex-1 flex-col\"\n              id=\"form\"\n            >\n              {currentSlide.form.inputs.map((el, i) =>\n                React.cloneElement(el, { key: el.props.name || i })\n              )}\n\n              <input type=\"hidden\" name=\"_grct\" id=\"_grct\" />\n\n              <div className=\"flex-1 flex flex-col justify-end\">\n                <button\n                  className={buttonClassesFn(\n                    \"g-recaptcha block text-center text-white bg-blue-400 py-3 px-5 duration-300 rounded-md hover:bg-blue-700 self-end focus:outline-none\"\n                  )}\n                  type=\"submit\"\n                >\n                  {currentSlide.form.submitButtonText}\n                </button>\n\n                <div className=\"mt-8 text-xs font-light text-gray-300\">\n                  Protegido por reCAPTCHA e sujeito à{\"\\u00A0\"}\n                  <a\n                    className=\"text-gray-400 font-medium hover:text-gray-300\"\n                    href=\"https://policies.google.com/privacy\"\n                  >\n                    Política de privacidade\n                  </a>\n                  {\"\\u00A0\"}e aos{\"\\u00A0\"}\n                  <a\n                    className=\"text-gray-400 font-medium hover:text-gray-300\"\n                    href=\"https://policies.google.com/terms\"\n                  >\n                    Termos de serviço\n                  </a>\n                  {\"\\u00A0\"}do Google.\n                </div>\n              </div>\n            </form>\n          </div>\n        )}\n      </div>\n      <footer className=\"absolute bottom-0 w-full flex justify-center text-center text-white opacity-50 pb-3\">\n        R. Maria Madalena, 344 - Vila Rosa Pires, Campo Grande - MS <br />\n        © Uperttech 2021\n      </footer>\n    </main>\n  );\n}\n","import React from \"react\";\nimport { SlidesProvider } from \"./providers/SlidesProvider\";\nimport { FormSlides } from \"./views/FormSlides\";\n\nexport function App() {\n  return (\n    <SlidesProvider>\n      <FormSlides />\n    </SlidesProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}